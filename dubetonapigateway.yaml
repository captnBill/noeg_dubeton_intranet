Resources:
  NoeGDubetonIntranetRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: NoeGdubetonintranetapi

  NoeGDubetonIntranetApiGatewayResourceEmployees:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - NoeGDubetonIntranetRestApi
        - RootResourceId
      PathPart: employees
      RestApiId: !Ref NoeGDubetonIntranetRestApi

  NoeGDubetonIntranetApiGatewayResourceTrucks:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - NoeGDubetonIntranetRestApi
        - RootResourceId
      PathPart: trucks
      RestApiId: !Ref NoeGDubetonIntranetRestApi

  NoeGDubetonIntranetApiGatewayResourceDeliveries:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - NoeGDubetonIntranetRestApi
        - RootResourceId
      PathPart: deliveries
      RestApiId: !Ref NoeGDubetonIntranetRestApi

  NoeGDubetonIntranetApiGatewayMethodGetEmployee:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref NoeGDubetonIntranetApiGatewayResourceEmployees
      RestApiId: !Ref NoeGDubetonIntranetRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetEmployeeFunction.Arn}/invocations
          - GetEmployeeFunction: !GetAtt GetEmployeeFunction.Arn

  NoeGDubetonIntranetApiGatewayMethodGetTrucks:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref NoeGDubetonIntranetApiGatewayResourceTrucks
      RestApiId: !Ref NoeGDubetonIntranetRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTrucksFunction.Arn}/invocations
          - GetTrucksFunction: !GetAtt GetTrucksFunction.Arn

  NoeGDubetonIntranetApiGatewayMethodGetDeliveries:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref NoeGDubetonIntranetApiGatewayResourceDeliveries
      RestApiId: !Ref NoeGDubetonIntranetRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDeliveriesFunction.Arn}/invocations
          - GetDeliveriesFunction: !GetAtt GetDeliveriesFunction.Arn

  GetEmployeeFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.getemployee
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              isBase64Encoded: false,
              statusCode: 200,
              headers: { "Content-Type": "text/plain" },
              body: `Your request: \n\n${JSON.stringify(event)}`,
            };
          };
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: !Ref NoeGDubetonIntranetDynamoDB

  GetTrucksFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.gettrucks
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              isBase64Encoded: false,
              statusCode: 200,
              headers: { "Content-Type": "text/plain" },
              body: `Your request: \n\n${JSON.stringify(event)}`,
            };
          };
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: !Ref NoeGDubetonIntranetDynamoDB

  GetDeliveriesFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.getdeliveries
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              isBase64Encoded: false,
              statusCode: 200,
              headers: { "Content-Type": "text/plain" },
              body: `Your request: \n\n${JSON.stringify(event)}`,
            };
          };
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: !Ref NoeGDubetonIntranetDynamoDB

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: NoeGDubetonLambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt NoeGDubetonIntranetDynamoDB.Arn

  NoeGDubetonIntranetDynamoDB:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: category
          KeyType: RANGE

  PopulateDynamoDBFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.populate
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamoDB = new AWS.DynamoDB.DocumentClient();
          exports.handler = async (event) => {
            const items = [
              { id: '1', category: 'employees', name: 'John Doe' },
              { id: '2', category: 'trucks', name: 'Truck 1' },
              { id: '3', category: 'deliveries', name: 'Delivery 1' },
            ];
            for (const item of items) {
              await dynamoDB.put({
                TableName: process.env.TABLE_NAME,
                Item: item,
              }).promise();
            }
            return { statusCode: 200, body: 'Data populated' };
          };
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: !Ref NoeGDubetonIntranetDynamoDB

  PopulateDynamoDBCustomResource:
    Type: 'Custom::PopulateDynamoDB'
    Properties:
      ServiceToken: !GetAtt PopulateDynamoDBFunction.Arn